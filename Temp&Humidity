Xenon - DHT11 Temperature/Humidity Sensor:
/*
 * Project XenonNode2_DHT
 * Description: Use DHT11 to measure temperature
 * Author: Joycephine, Willis, Barry
 * Date: 5/17/2020
 */
//Imported Library
#include "PietteTech_DHT.h"

// Pins Definition and DHT Type Definition
#define DHTTYPE DHT11
#define DHTPIN1 D2
#define DHTPIN2 D3

//Object Declarations
PietteTech_DHT DHT1(DHTPIN1, DHTTYPE);
PietteTech_DHT DHT2(DHTPIN2, DHTTYPE);
int n;      // counter

// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
  while (!Serial.available() && millis() < 30000) {
    Serial.println("Press any key to start.");
    Particle.process();
    delay(1000);
  }
  Serial.println("DHT Simple program using DHT.acquireAndWait");
  Serial.print("LIB version: ");
  Serial.println(DHTLIB_VERSION);
  Serial.println("---------------");
  // Start DHT11 sensor
  DHT1.begin();
  DHT2.begin();
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  Serial.print("\n");
  Serial.print(n);
  Serial.print(": Retrieving information from sensor: ");
  Serial.print("Read sensor: ");

  // Wait for 1 second
  int result1 = DHT1.acquireAndWait(3000);
  int result2 = DHT2.acquireAndWait(3000);

  // Checking if the DHT sensor outputs an error.
  
  switch (result1) {
  case DHTLIB_OK:
    Serial.println("OK");
    break;
  case DHTLIB_ERROR_CHECKSUM:
    Serial.println("Error\n\r\tChecksum error");
    break;
  case DHTLIB_ERROR_ISR_TIMEOUT:
    Serial.println("Error\n\r\tISR time out error");
    break;
  case DHTLIB_ERROR_RESPONSE_TIMEOUT:
    Serial.println("Error\n\r\tResponse time out error");
    break;
  case DHTLIB_ERROR_DATA_TIMEOUT:
    Serial.println("Error\n\r\tData time out error");
    break;
  case DHTLIB_ERROR_ACQUIRING:
    Serial.println("Error\n\r\tAcquiring");
    break;
  case DHTLIB_ERROR_DELTA:
    Serial.println("Error\n\r\tDelta time to small");
    break;
  case DHTLIB_ERROR_NOTSTARTED:
    Serial.println("Error\n\r\tNot started");
    break;
  default:
    Serial.println("Unknown error");
    break;
  }
  
  switch (result2) {
  case DHTLIB_OK:
    Serial.println("OK");
    break;
  case DHTLIB_ERROR_CHECKSUM:
    Serial.println("Error\n\r\tChecksum error");
    break;
  case DHTLIB_ERROR_ISR_TIMEOUT:
    Serial.println("Error\n\r\tISR time out error");
    break;
  case DHTLIB_ERROR_RESPONSE_TIMEOUT:
    Serial.println("Error\n\r\tResponse time out error");
    break;
  case DHTLIB_ERROR_DATA_TIMEOUT:
    Serial.println("Error\n\r\tData time out error");
    break;
  case DHTLIB_ERROR_ACQUIRING:
    Serial.println("Error\n\r\tAcquiring");
    break;
  case DHTLIB_ERROR_DELTA:
    Serial.println("Error\n\r\tDelta time to small");
    break;
  case DHTLIB_ERROR_NOTSTARTED:
    Serial.println("Error\n\r\tNot started");
    break;
  default:
    Serial.println("Unknown error");
    break;
  }
  
  float CelsiusAverage = (DHT1.getCelsius() + DHT2.getCelsius()) / 2;
  float HumidityAverage = (DHT1.getHumidity() + DHT2.getHumidity()) / 2;
  Serial.print("DHT Average Temperature (oC): ");
  Serial.println(CelsiusAverage, 2);
  Mesh.publish("DHT11 Sensor Readings", (String) CelsiusAverage);
  Particle.publish("DHT11 Sensor Readings", (String) CelsiusAverage);
  n++;
  delay(2000);
}
